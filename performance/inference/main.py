"""
Autores: Jo√£o Leonardi, Enzo e Jo√£o Vin√≠cius

Arquivo principal para execu√ß√£o do jogo de xadrez.
Para executar o jogo, basta executar o comando:
    python main.py
"""

import re
import os
import sys
import chess
import chess.svg
import chess.engine
import yaml
from chess.engine import PovScore

from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
from PyQt5.QtSvg import QSvgWidget

from utils.Utils import Common, Colors, Logger


class ChessUI(QMainWindow):
    """
    Classe que implementa a interface gr√°fica do jogo de xadrez.
    """
    SVG_FILENAME = 'board.svg'

    def __init__(self, engine_path: str, player_color: int, config: dict) -> None:
        """
        Construtor da classe.
        """
        super().__init__()

        self.engine = chess.engine.SimpleEngine.popen_uci(engine_path)

        engine_limit_config = config.get('engine_limit', {})
        self.engine.configure(config.get('engine_config', {}))
        self.engine_limit_config = chess.engine.Limit(**engine_limit_config)
        
        self.engine_path = engine_path
        self.board = chess.Board()
        self.player_color = player_color

        self.init_ui()


    def init_ui(self) -> None:
        """
        Inicializa a interface gr√°fica.
        """
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)

        self.svg_widget = QSvgWidget(self)
        self.update_board()
        layout.addWidget(self.svg_widget)

        self.setGeometry(100, 100, 600, 600)
        self.setWindowTitle('Volts ‚ö°')

        if self.player_color == 0:
            self.suggest_move()


    def update_board(self) -> None:
        """
        Atualiza o tabuleiro de xadrez.
        """
        svg_data = chess.svg.board(self.board)
        with open(self.SVG_FILENAME, 'w') as svg_file:
            svg_file.write(svg_data)

        self.svg_widget.load(self.SVG_FILENAME)
        self.svg_widget.show()

    def suggest_move(self) -> None:
        result = self.engine.play(self.board, self.engine_limit_config)
        self.board.push(result.move)
        self.update_board()

        info = self.engine.analyse(self.board, self.engine_limit_config)
        self.print_evaluation(info)


    def check_game_result(self) -> bool:
        """
        Verifica se o jogo terminou.
        """
        if self.board.is_checkmate():
            print("Xeque-mate! Voc√™ perdeu üíîüò¢")
            return True
        elif self.board.is_stalemate():
            print("Empate! O jogo terminou empatado ü§ùüòê")
            return True
        elif self.board.is_insufficient_material():
            print("Empate! Material insuficiente para xeque-mate ü§ùüòê")
            return True
        elif self.board.is_seventyfive_moves():
            print("Empate! O jogo atingiu o limite de 75 movimentos sem capturas ou movimentos de pe√µes ü§ùüòê")
            return True
        elif self.board.is_fivefold_repetition():
            print("Empate! A posi√ß√£o se repetiu pela quinta vez ü§ùüòê")
            return True
        return False

    def print_evaluation(self, info: dict) -> None:
        """
        Imprime a avalia√ß√£o da jogada sugerida pelo motor de xadrez.
        
        """


        if 'pv' in info:
            principal_variation = info['pv']
            print(type(principal_variation))
            print(f"Varia√ß√£o Principal: {principal_variation}")
        else:
            print("Varia√ß√£o Principal n√£o dispon√≠vel.")

        if 'depth' in info:
            print(f"Profundidade: {info['depth']}")
        else:
            print("Profundidade n√£o dispon√≠vel.")

        if 'nodes' in info:
            print(f"N√≥s analisados: {info['nodes']}")
        else:
            print("N√≥s analisados n√£o dispon√≠veis.")

        if 'time' in info:
            print(f"Tempo de an√°lise: {info['time']} segundos")
        else:
            print("Tempo de an√°lise n√£o dispon√≠vel.")

        print("\n")
    

def load_config(filename="config/config.yaml"):
    try:
        with open(filename, "r") as config_file:
            config = yaml.safe_load(config_file)
        return config
    except FileNotFoundError:
        print(f"Arquivo de configura√ß√£o '{filename}' n√£o encontrado.")
        return {}


if __name__ == "__main__":
    Common.authors()
    model_path = "/home/remix/wrkdir/my/ai.challenger/engines/Stockfish/src/stockfish"

    while True:
        player_number = input("Escolha a cor das pe√ßas 1(‚ö™) ou 0(‚ö´)   : ")
        
        if player_number.isdigit() and int(player_number) in [0, 1]:
            break

        print("Op√ß√£o inv√°lida. Por favor, escolha entre 0 (‚ö´) e 1 (‚ö™).")

    config_filename = "config/config.yaml"
    config = load_config(config_filename)
    print(f"Carregando configura√ß√µes do arquivo '{config}'...")


    app = QApplication(sys.argv)
    chess_ui = ChessUI(model_path, player_number, config)
    chess_ui.show()

    while True:
        user_move = input(f"{Colors.ORANGE}üòà PoST: {Colors.RESET}")
        if user_move.lower() == 'quit':
            break

        if chess.Move.from_uci(user_move) in chess_ui.board.legal_moves:
            chess_ui.board.push(chess.Move.from_uci(user_move))
            chess_ui.update_board()
            if chess_ui.check_game_result():
                break
            chess_ui.suggest_move()
            if chess_ui.check_game_result():
                break
        else:
            print("Jogada inv√°lida. Tente novamente.")

    chess_ui.engine.quit()
    sys.exit(app.exec_())
